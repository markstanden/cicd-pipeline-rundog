name: "Continuous Deployment"

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-succeeds:
    name: "Build Solution"
    uses: markstanden/coding-standards/.github/workflows/build.yml@f3a956ee24e225b3c4807a594d5040c9d0d3c3bc
    with:
      dotnet-version: ${{ vars.DOTNET_VERSION }}

  run-unit-tests:
    needs: [ "build-succeeds" ]
    name: "Run Unit Tests"
    uses: markstanden/coding-standards/.github/workflows/unit-tests.yml@f3a956ee24e225b3c4807a594d5040c9d0d3c3bc
    with:
      dotnet-version: ${{ vars.DOTNET_VERSION }}

  run-integration-tests:
    needs: [ "build-succeeds" ]
    name: "Run Integration Tests"
    uses: markstanden/coding-standards/.github/workflows/integration-tests.yml@f3a956ee24e225b3c4807a594d5040c9d0d3c3bc
    with:
      dotnet-version: ${{ vars.DOTNET_VERSION }}

  build-staging-infrastructure:
    needs: [ "build-succeeds" ]
    name: "Build Staging Environment Infrastructure"
    uses: markstanden/coding-standards/.github/workflows/opentofu-build-infrastructure.yml@f3a956ee24e225b3c4807a594d5040c9d0d3c3bc
    with:
      opentofu-version: "1.10.5"
      infrastructure-directory: "./infrastructure"
      environment: "staging"
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  
  build-production-infrastructure:
    needs: [ "build-succeeds" ]
    name: "Build Production Environment Infrastructure"
    uses: markstanden/coding-standards/.github/workflows/opentofu-build-infrastructure.yml@f3a956ee24e225b3c4807a594d5040c9d0d3c3bc
    with:
      opentofu-version: "1.10.5"
      infrastructure-directory: "./infrastructure"
      environment: "production"
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  
  build-frontend-release:
    needs: [ "build-succeeds" ]
    name: "Build Frontend Artifact"
    runs-on: "ubuntu-latest"
    permissions:
      contents: read
      actions: write  # needed to save caches
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup .NET"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ vars.DOTNET_VERSION }}

      - name: "Cache NuGet packages"
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj', '**/*.sln') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: "Restore dependencies"
        run: dotnet restore src/rundog/rundog.csproj

      - name: "Build"
        run: dotnet build src/rundog/rundog.csproj --no-restore --configuration Release

      - name: "Publish"
        run: dotnet publish src/rundog/rundog.csproj --no-restore --configuration Release --output ./publish

      - name: "Upload build artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: "rundog-frontend"
          if-no-files-found: error
          path: ./publish
          retention-days: 30

  staging-frontend-deploy:
    needs: [ "build-succeeds", "run-unit-tests", "run-integration-tests", "build-staging-infrastructure", "build-frontend-release" ]
    name: "Deploy Frontend to staging"
    runs-on: "ubuntu-latest"
    environment: "staging"
    permissions:
      contents: read
      actions: read
    outputs:
      staging-url: ${{ steps.staging_deploy.outputs.static_web_app_url }}
    concurrency:
      group: staging-swa-deploy
      cancel-in-progress: true
    steps:
      - name: "Parse Infrastructure Outputs"
        id: parse_staging_outputs
        run: |
          echo "token=${{ fromJSON(needs.build-staging-infrastructure.outputs.tofu-outputs).azure_static_web_app_api_token.value }}" >> $GITHUB_OUTPUT

      - name: "Debug Staging Outputs"
        run: |
          token="${{ steps.parse_staging_outputs.outputs.token }}"
          echo "::add-mask::${token}"
          echo "Staging SWA Token parsed with length: ${#token}"

      - name: "Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: "rundog-frontend"
          path: ./publish

      - name: "Deploy to Azure Static Web App"
        uses: Azure/static-web-apps-deploy@v1
        id: staging_deploy
        with:
          azure_static_web_apps_api_token: ${{ steps.parse_staging_outputs.outputs.token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "publish/wwwroot"
          output_location: ""
          skip_app_build: true
          is_static_export: true

  run-e2e-tests:
    needs: "staging-frontend-deploy"
    name: "Run End-to-End Tests"
    uses: markstanden/coding-standards/.github/workflows/playwright-test-runner.yml@f3a956ee24e225b3c4807a594d5040c9d0d3c3bc
    with:
      dotnet-version: ${{ vars.DOTNET_VERSION }}
      test-project-path: "tests/rundog.E2E.Tests"
      base-url: ${{ needs.staging-frontend-deploy.outputs.staging-url }}

  production-frontend-deploy:
    needs: [ "build-frontend-release", "run-e2e-tests", "build-production-infrastructure" ]
    name: "Deploy Frontend to production"
    runs-on: "ubuntu-latest"
    environment: "production"
    permissions:
      contents: read
      actions: read
    outputs:
      production-url: ${{ steps.production_deploy.outputs.static_web_app_url }}
    concurrency:
      group: "production-swa-deploy"
      cancel-in-progress: true
    steps:
      - name: "Parse Infrastructure Outputs"
        id: parse_production_outputs
        run: |
          echo "token=${{ fromJSON(needs.build-production-infrastructure.outputs.tofu-outputs).azure_static_web_app_api_token.value }}" >> $GITHUB_OUTPUT

      - name: "Debug Production Outputs"
        run: |
          token="${{ steps.parse_production_outputs.outputs.token }}"
          echo "::add-mask::${token}"
          echo "Production SWA Token parsed with length: ${#token}"

      - name: "Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: "rundog-frontend"
          path: ./publish

      - name: "Deploy to Azure Static Web App"
        uses: Azure/static-web-apps-deploy@v1
        id: production_deploy
        with:
          azure_static_web_apps_api_token: ${{ steps.parse_production_outputs.outputs.token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "publish/wwwroot"
          output_location: ""
          skip_app_build: true
          is_static_export: true
  
  run-healthcheck:
    needs: "production-frontend-deploy"
    name: "Run Production Healthcheck"
    uses: markstanden/coding-standards/.github/workflows/playwright-test-runner.yml@f3a956ee24e225b3c4807a594d5040c9d0d3c3bc
    with:
      dotnet-version: ${{ vars.DOTNET_VERSION }}
      test-project-path: "tests/rundog.E2E.Tests"
      base-url: ${{ needs.production-frontend-deploy.outputs.production-url }}