name: "Azure CI/CD Deployment"

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  check-formatting:
    name: "Code Formatting Compliance Check"
    uses: markstanden/coding-standards/.github/workflows/format.yml@eff9339a6a52e3df43ff3a89b299113ebdddbc55

    with:
      dotnet-version: ${{ vars.DOTNET_VERSION }}

  build-succeeds:
    needs: "check-formatting"
    name: "Build Solution"
    uses: markstanden/coding-standards/.github/workflows/build.yml@eff9339a6a52e3df43ff3a89b299113ebdddbc55
    with:
      dotnet-version: ${{ vars.DOTNET_VERSION }}

  run-unit-tests:
    needs: "build-succeeds"
    name: "Run Unit Tests"
    uses: markstanden/coding-standards/.github/workflows/unit-tests.yml@eff9339a6a52e3df43ff3a89b299113ebdddbc55
    with:
      dotnet-version: ${{ vars.DOTNET_VERSION }}

  run-integration-tests:
    needs: "run-unit-tests"
    name: "Run Integration Tests"
    uses: markstanden/coding-standards/.github/workflows/integration-tests.yml@eff9339a6a52e3df43ff3a89b299113ebdddbc55
    with:
      dotnet-version: ${{ vars.DOTNET_VERSION }}

  run-sonarqube-deep-analysis:
    needs: "run-integration-tests"
    name: "SonarQube Analysis"
    uses: markstanden/coding-standards/.github/workflows/sonarqube.yml@eff9339a6a52e3df43ff3a89b299113ebdddbc55
    with:
      dotnet-version: ${{ vars.DOTNET_VERSION }}
      sonar-project-key: ${{ vars.SONAR_PROJECT_KEY }}
      sonar-organization: ${{ vars.SONAR_ORGANIZATION }}
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-frontend-release:
    needs: "run-sonarqube-deep-analysis"
    name: "Build Frontend Artifact"
    runs-on: "ubuntu-latest"
    permissions:
      contents: read
      actions: write  # needed to save caches
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup .NET"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ vars.DOTNET_VERSION }}

      - name: "Cache NuGet packages"
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj', '**/*.sln') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: "Restore dependencies"
        run: dotnet restore rundog/rundog.csproj

      - name: "Build"
        run: dotnet build rundog/rundog.csproj --no-restore --configuration Release

      - name: "Publish"
        run: dotnet publish rundog/rundog.csproj --no-restore --configuration Release --output ./publish

      - name: "Upload build artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: "rundog-frontend"
          if-no-files-found: error
          path: ./publish
          retention-days: 30

  staging-frontend-deploy:
    needs: "build-frontend-release"
    name: "Deploy Frontend to staging"
    runs-on: "ubuntu-latest"
    environment: "staging"
    outputs:
      staging-url: ${{ steps.staging_deploy.outputs.static_web_app_url }}
    concurrency:
      group: staging-swa-deploy
      cancel-in-progress: true
    steps:
      - name: "Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: "rundog-frontend"
          path: ./publish

      - name: "Deploy to Azure Static Web App"
        uses: Azure/static-web-apps-deploy@v1
        id: staging_deploy
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "publish/wwwroot"
          output_location: ""
          skip_app_build: true
          is_static_export: true
          deployment_environment: "staging"

  run-e2e-tests:
    needs: "staging-frontend-deploy"
    name: "Run End-to-End Tests"
    uses: markstanden/coding-standards/.github/workflows/playwright-test-runner.yml@eff9339a6a52e3df43ff3a89b299113ebdddbc55
    with:
      dotnet-version: ${{ vars.DOTNET_VERSION }}
      test-project-path: "rundog.E2E.Tests"
      base-url: ${{ needs.staging-frontend-deploy.outputs.staging-url }}

  production-frontend-deploy:
    needs: "run-e2e-tests"
    name: "Deploy Frontend to production"
    runs-on: "ubuntu-latest"
    environment: "production"
    concurrency:
      group: "production-swa-deploy"
      cancel-in-progress: true
    steps:
      - name: "Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: "rundog-frontend"
          path: ./publish

      - name: "Deploy to Azure Static Web App"
        uses: Azure/static-web-apps-deploy@v1
        id: production_deploy
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "publish/wwwroot"
          output_location: ""
          skip_app_build: true
          is_static_export: true